name: 'Release to Prod'
# borrowed from hcaecoe
# https://github.com/HCAECOE/developer-platform-app/blob/develop/.github/workflows/create-release.yml
# This workflow:
#
# 1. Bumps the last version then tags the commit if it's not yet tagged
# 2. Automatically generates release notes using info from included pull requests and formatting guidance from a .github/release.yml
# 3. Creates a tagged release in the repo including the release notes
#
# This workflow can be triggered by a push to the main branch, or a push of a tag, or manually by providing one of the needed inputs.
#
# Requires a release.yaml in the repo's .github directory that provides guidance as to how the tags should be grouped in the release notes.

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version to use for release. Example: v1.4.1"
        required: false
      bump_type:
        description: "Type of version bump to do"
        required: false
        default: patch_v1.4.X
        type: choice
        options:
          - patch_v1.4.X
          - minor_v1.X.0
          - major_vX.0.0  

  workflow_call:
    inputs:
      release_version:
        description: "Version to use for release. Example: v1.4.1"
        type: string
        required: false
      bump_type:
        description: "Type of version bump to do"
        required: false
        default: patch_v1.4.X
        type: string

env:
  ARGO_SERVER: ocp-argocd.apps.xr2.paas.medcity.net
  ARGO_APPNAME: csg-nate-prod
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITOPS_REPO: nate-gitops
  IMAGE_NAME: ${{ github.event.repository.name }}
  REGISTRY: builders.repos.medcity.net
  REGISTRY_BASE: hca-nte
  SOURCE_ENV: uat

jobs:
  # The following job, set-vars, is here to expose the defined
  # environment variables above to the reusable workflow called
  # in the "build" job.  This is necessary as you cannot directly
  # pass the environment to a subsequently called reusable workflow.
  create-release:
    name: Create Release
    runs-on: [onprem-k8s-arc,enterprise,lnx-amd64,dind,self-hosted]
    outputs:
      REGISTRY: ${{ steps.vars.outputs.REGISTRY }}
      REGISTRY_BASE: ${{ steps.vars.outputs.REGISTRY_BASE }}
      SOURCE_ENV: ${{ steps.vars.outputs.SOURCE_ENV }}
      GITOPS_REPO: ${{ steps.vars.outputs.GITOPS_REPO }}

    steps:
      - name: Expose Variables
        id: vars
        run: |
          echo "Exposing env variables..."
          echo "REGISTRY=$REGISTRY" >>$GITHUB_OUTPUT
          echo "REGISTRY_BASE=$REGISTRY_BASE" >>$GITHUB_OUTPUT
          echo "SOURCE_ENV=$SOURCE_ENV" >>$GITHUB_OUTPUT
          echo "GITOPS_REPO=$GITOPS_REPO" >>$GITHUB_OUTPUT
  
      # Checkout repo.
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          fetch-depth: 0

      - name: Determine bump type
        id: bump
        run: |
          ${{ github.event.inputs.bump_type != '' }} && bump_type=${{ github.event.inputs.bump_type }} || bump_type=minor
          # Sanitize bump type
          bump=${bump_type%_*}
          echo "type=$bump" >> $GITHUB_OUTPUT

      # Create and push tag for new version - this action doesn't bump the version and tag the commit if already tagged.
      - name: Bump version and push tag
        id: bump-version
        uses: anothrNick/github-tag-action@a2c70ae13a881faf2b4953baaa9e49731997ab36 #1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: ${{ steps.bump.outputs.type }}

      # Generate release notes from included pull requests and create release in repo.
      - name: CreateRelease
        run: |
          # Check if there's a specified tag and use it if so. Otherwise, use the output of the version bump action.
          ${{ github.event.inputs.release_version != '' }} && tag=${{ github.event.inputs.release_version }} || tag=${{ steps.bump-version.outputs.tag }}
          gh release create $tag --generate-notes 

  gitops-update:
    needs: [create-release]
    uses: HCA-CTI/.github/.github/workflows/reusable-gitops-update.yaml@v0.0.10
    permissions:
      actions: write
      checks: write
      pull-requests: write
      contents: write
    secrets:
      ACTIONS_AUTOMATIONS_PAT: ${{ secrets.ACTIONS_AUTOMATIONS_PAT }}
    with:
      OVERLAY_PATH: overlays/prod
      REGISTRY: ${{ needs.create-release.outputs.REGISTRY }}
      REGISTRY_BASE: ${{ needs.create-release.outputs.REGISTRY_BASE }}
      SOURCE_ENV: ${{ needs.create-release.outputs.SOURCE_ENV }}
      TARGET_ENV: prod
      GITOPS_REPO: ${{ needs.create-release.outputs.GITOPS_REPO }}    

#  webex-alert:
#    needs: [ gitops-update ]
#    runs-on: [onprem-k8s-arc,enterprise,lnx-amd64,dind,self-hosted]
#    name: Send a Webex Notification
#    steps:
#      - name: set release date
#        run: |
#          echo "RELEASE_DATE=$(date)" >> ${GITHUB_ENV}
#
#      - name: Post Message to Webex Room
#        uses: HCA-CTI/action-webex-notify@v0.0.1
#        with:
#          markdown-message: "**Service Formally Known As PushIT Update**\n\n
#          **Queued in ArgoCD:** https://${{ env.ARGO_SERVER }}/applications/argocd/${{ env.ARGO_APPNAME }}?view=tree&resource=&node=apps%2FDeployment%2F${{ env.ARGO_APPNAME }}%2F${{ env.IMAGE_NAME }}%2F0\n\n
#          Until we have autosync on we need to push the button!\n\n
#          **By Team Member:** ${{ github.actor }}\n
#          **Image Update for:** ${{ github.repository }}\n
#          **Build Commit Hash:** ${{ github.sha }}\n
#          **Message Received:** ${{ env.RELEASE_DATE }}"
#        env:
#          WEBEX_TOKEN: ${{ secrets.WEBEX_TOKEN }}
#          WEBEX_ROOM_ID: ${{ secrets.ATDSP_IMAGE_WEBEX_ID }} 